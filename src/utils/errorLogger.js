// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
export const logErrorToService = (error, errorInfo) => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
    // –Ω–∞–ø—Ä–∏–º–µ—Ä: Sentry, LogRocket, Bugsnag –∏ —Ç.–¥.
    
    const errorData = {
        message: error.message,
        stack: error.stack,
        componentStack: errorInfo?.componentStack,
        timestamp: new Date().toISOString(),
        url: window.location.href,
        userAgent: navigator.userAgent,
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        // userId: getCurrentUserId(),
        // sessionId: getSessionId(),
    };

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
        console.group('üö® Application Error');
        console.error('Error:', error);
        console.error('Error Info:', errorInfo);
        console.error('Error Data:', errorData);
        console.groupEnd();
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–ø—Ä–∏–º–µ—Ä)
    // try {
    //     fetch('/api/errors', {
    //         method: 'POST',
    //         headers: {
    //             'Content-Type': 'application/json',
    //         },
    //         body: JSON.stringify(errorData),
    //     });
    // } catch (logError) {
    //     console.error('Failed to log error:', logError);
    // }

    // –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Sentry
    // if (window.Sentry) {
    //     window.Sentry.captureException(error, {
    //         contexts: {
    //             react: {
    //                 componentStack: errorInfo?.componentStack,
    //             },
    //         },
    //     });
    // }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
export const createCustomError = (message, code = 'UNKNOWN_ERROR') => {
    const error = new Error(message);
    error.code = code;
    error.isCustomError = true;
    return error;
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
export const isNetworkError = (error) => {
    return error.message.includes('Network Error') || 
           error.message.includes('fetch') ||
           error.message.includes('Failed to fetch');
};

export const isAuthError = (error) => {
    return error.message.includes('401') || 
           error.message.includes('Unauthorized') ||
           error.message.includes('Authentication');
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
export const getUserFriendlyMessage = (error) => {
    if (isNetworkError(error)) {
        return '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
    }
    
    if (isAuthError(error)) {
        return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–Ω–æ–≤–∞.';
    }
    
    if (error.code === 'GUEST_NOT_FOUND') {
        return '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.';
    }
    
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
}; 