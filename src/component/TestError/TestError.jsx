import React, { useState } from 'react';
import './TestError.css';

const TestError = () => {
    const [shouldThrow, setShouldThrow] = useState(false);

    // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É
    const throwError = () => {
        throw new Error('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ErrorBoundary! üß™');
    };

    // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ —Ä–µ–Ω–¥–µ—Ä–µ
    const renderError = () => {
        if (shouldThrow) {
            throw new Error('–û—à–∏–±–∫–∞ –≤ —Ä–µ–Ω–¥–µ—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞! üé≠');
        }
        return null;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
    const simulateNetworkError = () => {
        const error = new Error('Network Error: Failed to fetch');
        error.name = 'NetworkError';
        throw error;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const simulateAuthError = () => {
        const error = new Error('401 Unauthorized');
        error.name = 'AuthError';
        throw error;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const testModalError = () => {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const modalError = new Error('–û—à–∏–±–∫–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ! ü™ü');
        modalError.name = 'ModalError';
        throw modalError;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –≤ –ø–æ—Ä—Ç–∞–ª–µ
    const testPortalError = () => {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –ø–æ—Ä—Ç–∞–ª–µ
        const portalError = new Error('–û—à–∏–±–∫–∞ –≤ React Portal! üö™');
        portalError.name = 'PortalError';
        throw portalError;
    };

    return (
        <div className="test-error-container">
            <h2>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ErrorBoundary</h2>
            <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫:</p>
            
            <div className="test-buttons">
                <button 
                    className="test-button error"
                    onClick={throwError}
                >
                    üö® –í—ã–∑–≤–∞—Ç—å –æ–±—ã—á–Ω—É—é –æ—à–∏–±–∫—É
                </button>
                
                <button 
                    className="test-button error"
                    onClick={() => setShouldThrow(true)}
                >
                    üé≠ –í—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Ä–µ–Ω–¥–µ—Ä–µ
                </button>
                
                <button 
                    className="test-button network"
                    onClick={simulateNetworkError}
                >
                    üåê –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É
                </button>
                
                <button 
                    className="test-button auth"
                    onClick={simulateAuthError}
                >
                    üîê –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                </button>
                
                <button 
                    className="test-button undefined"
                    onClick={() => {
                        const obj = null;
                        obj.someMethod(); // TypeError
                    }}
                >
                    ‚ùå –í—ã–∑–≤–∞—Ç—å TypeError
                </button>
                
                <button 
                    className="test-button modal"
                    onClick={testModalError}
                >
                    ü™ü –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                </button>
                
                <button 
                    className="test-button portal"
                    onClick={testPortalError}
                >
                    üö™ –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –≤ –ø–æ—Ä—Ç–∞–ª–µ
                </button>
            </div>
            
            {renderError()}
        </div>
    );
};

export default TestError; 