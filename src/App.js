import React, {useEffect, useState} from "react";
import "./App.css";
import useConfetti from "./hook/useConfetti";
import useGuestData from "./hook/useGuestData";
import useAcceptGuest from "./hook/useAcceptGuest";
import useRejectGuest from "./hook/useRejectGuest";
import useAdminAuth from "./hook/useAdminAuth";
import Loader from "./component/loader/Loader";
import GuestTable from "./component/admin/GuestTable";

function App() {
    const [firstRender, setFirstRender] = useState(true);
    const {isAdmin, guestList, guestListError, guestListLoading} = useAdminAuth();
    useConfetti(isAdmin);
    let guestUUID = window.location.pathname.split('/').pop();
    guestUUID = guestUUID?.length === 36 ? guestUUID : null;

    const {guestData, guestLoading, guestError, fetchGuestData} = useGuestData(guestUUID);
    const {acceptCallback, acceptLoading, acceptError} = useAcceptGuest(guestUUID);
    const {rejectCallback, rejectLoading, rejectError} = useRejectGuest(guestUUID);
    useEffect(() => {
        if (!acceptLoading && !rejectLoading) {
            if (!firstRender) fetchGuestData();
            else setFirstRender(false);
        }
    }, [acceptLoading, rejectLoading, fetchGuestData, firstRender]);
    // Render admin view if authenticated
    if (isAdmin) {
        return (
            <div className="app-container admin-mode">
                <div className="admin-panel">
                    <div className="admin-header">
                        <h1 className="admin-title">Wedding Admin Panel</h1>
                    </div>
                    <GuestTable
                        guestList={guestList}
                        loading={guestListLoading}
                        error={guestListError}
                    />
                </div>
            </div>
        );
    }

    // Regular guest view
    return (
        <div className="app-container">
            <div className="confetti-container" id='confetti-container'></div>
            <div className="invitation-container">
                {guestData ? (
                    <>
                        <h1>üíç –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–≤–∞–¥—å–±—É üíç</h1>
                        <p className="welcome-text">{guestData?.fullName || '–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è –∏ –±–ª–∏–∑–∫–∏–µ!'}</p>
                        <p>
                            –ú—ã, <span className="highlight">–î–º–∏—Ç—Ä–∏–π</span> –∏ <span
                            className="highlight">–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞</span>,
                            —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ –Ω–∞—à–µ —Å–≤–∞–¥–µ–±–Ω–æ–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–æ!
                        </p>
                        <p className="date">üìÖ –î–∞—Ç–∞: 20 –∏—é–ª—è 2025 –≥–æ–¥–∞</p>
                        <p className="location">üìç –ú–µ—Å—Ç–æ: –†–µ—Å—Ç–æ—Ä–∞–Ω "–ë–µ–ª—ã–π —Å–∞–¥", –≥. –ú–æ—Å–∫–≤–∞</p>
                        <p className="ending-text">–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —ç—Ç–æ—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å!</p>
                        <button
                            className="rsvp-button accept"
                            onClick={acceptCallback}
                        >
                            {acceptLoading ? <Loader/> : 'üíå –Ø –±—É–¥—É!'}
                        </button>
                        <button
                            className="rsvp-button reject"
                            onClick={rejectCallback}
                        >
                            {rejectLoading ? <Loader/> : 'üò© –°–æ—Ä–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è'}
                        </button>
                    </>
                ) : guestLoading ? (
                    <Loader/>
                ) : (
                    'üò©–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ωüò©'
                )}
            </div>
        </div>
    );
}

export default App;
